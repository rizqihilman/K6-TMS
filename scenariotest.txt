ðŸ“Œ Apa itu Skenario Test di k6?
Di k6, skenario adalah cara untuk menentukan bagaimana virtual user (VU) akan berjalan:

Berapa banyak VU
Berapa lama
Bagaimana pola naik/turunnya VU
Apakah looping, ramp-up, ramp-down, dsb

Semua diatur di options.scenarios atau mode sederhana seperti vus + duration.

âœ… Jenis-jenis skenario di k6
Berikut yang paling umum:

Nama Skenario	          Keterangan
constant-vus	          Menjalankan sejumlah VU yang konstan selama durasi tertentu.
ramping-vus	              Menambah/mengurangi jumlah VU secara bertahap.
per-vu-iterations	      Setiap VU menjalankan sejumlah iterasi tertentu.
shared-iterations	      Semua VU berbagi total iterasi tertentu.
constant-arrival-rate	  Menjalankan sejumlah request per waktu tertentu.
ramping-arrival-rate	  Mengubah laju kedatangan request secara bertahap.

âœ¨ Contoh Script Skenario
ðŸ”¹ 1. Constant VUs (sederhana)

export const options = {
  vus: 10,          // 10 Virtual Users
  duration: '30s',  // berjalan selama 30 detik
};

ðŸ”¹ 2. Ramping VUs (naik turun)

export const options = {
  scenarios: {
    ramping_test: {
      executor: 'ramping-vus',
      startVUs: 0,
      stages: [
        { duration: '10s', target: 10 }, // naik ke 10 VU
        { duration: '20s', target: 50 }, // naik ke 50 VU
        { duration: '10s', target: 0 },  // turun ke 0
      ],
      gracefulRampDown: '0s',
    },
  },
};

ðŸ”¹ 3. Per VU Iterations

export const options = {
  scenarios: {
    my_test: {
      executor: 'per-vu-iterations',
      vus: 5,
      iterations: 10, // setiap VU menjalankan 10 iterasi
      maxDuration: '1m',
    },
  },
};

ðŸ”¹ 4. Constant Arrival Rate (kontrol request per detik)

export const options = {
  scenarios: {
    rate_test: {
      executor: 'constant-arrival-rate',
      rate: 20,              // 20 iterations per second
      timeUnit: '1s',
      duration: '30s',
      preAllocatedVUs: 50,   // minimal VU
      maxVUs: 100,           // maksimal VU
    },
  },
};

ðŸ”¹ 5. Ramping Arrival Rate

export const options = {
  scenarios: {
    ramping_rate: {
      executor: 'ramping-arrival-rate',
      startRate: 10,
      timeUnit: '1s',
      preAllocatedVUs: 20,
      maxVUs: 100,
      stages: [
        { target: 50, duration: '30s' },
        { target: 10, duration: '30s' },
      ],
    },
  },
};

ðŸ“¥ Cara Menjalankan
Simpan script misalnya test.js, lalu jalankan:

k6 run test.js

Atau pakai dashboard:

k6 run --out dashboard test.js


âœ… Mau saya bantu bikin skenario spesifik?
Misalnya:

Kamu mau simulasi login â†’ browse â†’ checkout
Atau mau soak test, ramp-up, ramp-down
Atau gabungan beberapa skenario
Kalau iya, tinggal bilang aja detailnya:
ðŸ‘‰ Target VU berapa? durasi berapa? pola apa yang kamu inginkan?

Aku siap bantu buatin scriptnya langsung untukmu! ðŸš€ðŸ”¥




ðŸŽ¯ Jenis Performance Test & Skenario k6 yang sesuai
âœ… 1. Load Test
ðŸ‘‰ Tujuan: Mengukur performa aplikasi pada beban normal hingga tinggi dalam jangka waktu tertentu.
ðŸ“Œ Skenario: gunakan constant-vus atau ramping-vus.
âœ… Contoh:

export const options = {
  scenarios: {
    load_test: {
      executor: 'ramping-vus',
      startVUs: 0,
      stages: [
        { duration: '2m', target: 50 }, // naik ke 50 user dalam 2 menit
        { duration: '5m', target: 50 }, // bertahan di 50 user selama 5 menit
        { duration: '2m', target: 0 },  // turun kembali
      ],
    },
  },
};

âœ… 2. Stress Test
ðŸ‘‰ Tujuan: Mengukur batas kapasitas maksimum aplikasi dengan cara meningkatkan beban hingga sistem gagal.
ðŸ“Œ Skenario: ramping-vus dengan target sangat besar, atau ramping-arrival-rate.
âœ… Contoh:
export const options = {
  scenarios: {
    stress_test: {
      executor: 'ramping-vus',
      startVUs: 0,
      stages: [
        { duration: '2m', target: 100 },
        { duration: '2m', target: 200 },
        { duration: '2m', target: 400 },
        { duration: '2m', target: 800 },
      ],
      gracefulStop: '30s',
    },
  },
};
âœ… 3. Soak Test (Endurance Test)
ðŸ‘‰ Tujuan: Mengukur kestabilan sistem dalam jangka waktu lama dengan beban konstan.
ðŸ“Œ Skenario: constant-vus dengan durasi panjang.
âœ… Contoh:
export const options = {
  scenarios: {
    soak_test: {
      executor: 'constant-vus',
      vus: 50,
      duration: '2h', // jalankan selama 2 jam
    },
  },
};
âœ… 4. Spike Test
ðŸ‘‰ Tujuan: Melihat respon sistem ketika beban tiba-tiba naik drastis.
ðŸ“Œ Skenario: ramping-vus dengan tahap awal rendah lalu langsung loncat.
âœ… Contoh:
export const options = {
  scenarios: {
    spike_test: {
      executor: 'ramping-vus',
      startVUs: 0,
      stages: [
        { duration: '10s', target: 10 }, // awal santai
        { duration: '10s', target: 200 }, // langsung loncat
        { duration: '1m', target: 0 },   // turun lagi
      ],
    },
  },
};

âœ… 5. Break Point Test
ðŸ‘‰ Tujuan: Sama seperti stress test tapi fokus mencari titik sistem mulai gagal.
ðŸ“Œ Skenario: Mirip stress test, naikkan bertahap sampai respon tidak stabil.
âœ… Contoh: (hampir sama dengan stress test tapi dengan monitoring lebih detail)

ðŸ“‹ Ringkasan
Jenis Test	        Executor k6	                        Contoh Pengaturan
Load Test	        ramping-vus atau constant-vus	    Beban normal â†’ tinggi
Stress Test	        ramping-vus / ramping-arrival-rate	Naik terus sampai batas
Soak Test	        constant-vus	                    Beban konstan lama
Spike Test	        ramping-vus	                        Lonjakan mendadak
Break Point Test	ramping-vus	                        Naik bertahap cari titik gagal

ðŸ’¡ Cara jalankan:

k6 run --out dashboard test.js